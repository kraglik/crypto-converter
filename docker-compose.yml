services:
  postgres:
    build:
      context: ./docker/postgres
      dockerfile: Dockerfile
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres_dev}
      POSTGRES_DB: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - converter-network
    command: >
      postgres
      -c shared_preload_libraries='pg_cron,pg_partman_bgw'
      -c cron.database_name='crypto_converter'
      -c pg_partman_bgw.interval=3600
      -c pg_partman_bgw.role='postgres'
      -c pg_partman_bgw.dbname='crypto_converter'
      -c max_connections=200
      -c log_statement='all'

  db-setup:
    build:
      context: ./docker/db-setup
      dockerfile: Dockerfile
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres_dev}
      API_USER_PASSWORD: ${API_USER_PASSWORD:-api_dev_pass}
      CONSUMER_USER_PASSWORD: ${CONSUMER_USER_PASSWORD:-consumer_dev_pass}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - converter-network
    restart: "no"

  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    environment:
      DATABASES_HOST: postgres
      DATABASES_PORT: 5432
      DATABASES_DBNAME: crypto_converter
      DATABASES_USER: postgres
      DATABASES_PASSWORD: ${POSTGRES_PASSWORD:-postgres_dev}
      POOL_MODE: transaction
      MAX_CLIENT_CONN: 200
      DEFAULT_POOL_SIZE: 25
      RESERVE_POOL_SIZE: 5
      RESERVE_POOL_TIMEOUT: 3
      SERVER_LIFETIME: 3600
      SERVER_IDLE_TIMEOUT: 600
      AUTH_TYPE: trust  # md5
      AUTH_USER: postgres
      LOG_CONNECTIONS: 1
      LOG_DISCONNECTIONS: 1
      STATS_PERIOD: 60
    ports:
      - "${PGBOUNCER_PORT:-6432}:6432"
    depends_on:
      postgres:
        condition: service_healthy
      db-setup:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "6432"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s
    networks:
      - converter-network

  redis:
    image: redis:8-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - converter-network

  open-telemetry-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/open-telemetry-collector-config.yaml"]
    volumes:
      - ./docker/open-telemetry-collector/open-telemetry-collector-config.yaml:/etc/open-telemetry-collector-config.yaml:ro
    ports:
      - "4317:4317"
      - "4318:4318"
      - "8889:8889"
    networks:
      - converter-network
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: ./docker/app/Dockerfile
      target: final
    command: ["api"]
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      pgbouncer:
        condition: service_healthy
      redis:
        condition: service_healthy
      open-telemetry-collector:
        condition: service_started
    environment:
      DATABASE_URL: postgresql+asyncpg://converter_api:${API_USER_PASSWORD:-api_dev_pass}@pgbouncer:6432/crypto_converter
      REDIS_HOST: redis
      REDIS_PORT: 6379
      API_HOST: 0.0.0.0
      API_PORT: ${API_PORT:-8000}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      JSON_LOGS: ${JSON_LOGS:-true}
      QUOTE_MAX_AGE_SECONDS: ${QUOTE_MAX_AGE_SECONDS:-60}
      REDIS_QUOTE_TTL_SECONDS: ${REDIS_QUOTE_TTL_SECONDS:-90}
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
      ENABLE_TRACING: ${ENABLE_TRACING:-true}
      OPEN_TELEMETRY_COLLECTOR_ENDPOINT: http://open-telemetry-collector:4318/v1/traces
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - converter-network

  quote-consumer:
    build:
      context: .
      dockerfile: ./docker/app/Dockerfile
      target: final
    command: ["quote-consumer"]
    depends_on:
      pgbouncer:
        condition: service_healthy
      redis:
        condition: service_healthy
      open-telemetry-collector:
        condition: service_started
    environment:
      DATABASE_URL: postgresql+asyncpg://converter_consumer:${CONSUMER_USER_PASSWORD:-consumer_dev_pass}@pgbouncer:6432/crypto_converter
      REDIS_HOST: redis
      REDIS_PORT: 6379
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      JSON_LOGS: ${JSON_LOGS:-true}
      FETCH_INTERVAL_SECONDS: ${FETCH_INTERVAL_SECONDS:-30}
      SYMBOL_FETCH_INTERVAL_SECONDS: ${SYMBOL_FETCH_INTERVAL_SECONDS:-60}
      QUOTE_MAX_AGE_SECONDS: ${QUOTE_MAX_AGE_SECONDS:-60}
      REDIS_QUOTE_TTL_SECONDS: ${REDIS_QUOTE_TTL_SECONDS:-90}
      BINANCE_API_TIMEOUT: ${BINANCE_API_TIMEOUT:-10}
      BINANCE_MAX_CONNECTIONS: ${BINANCE_MAX_CONNECTIONS:-10}
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
      ENABLE_TRACING: ${ENABLE_TRACING:-true}
      OPEN_TELEMETRY_COLLECTOR_ENDPOINT: http://open-telemetry-collector:4318/v1/traces
    restart: unless-stopped
    networks:
      - converter-network

networks:
  converter-network:
    driver: bridge

volumes:
  postgres_data:
